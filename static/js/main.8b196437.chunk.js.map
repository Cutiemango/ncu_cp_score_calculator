{"version":3,"sources":["ResultContainer.js","UIContainer.js","index.js"],"names":["ResultContainer","submissions","rating","contests","contestList","295849","index","maxProb","296944","298568","301125","304895","308133","problemIDs","basicProblems","1","2","3","4","5","6","bonusProblems","ratingScore","800","1299","1599","1899","3000","result","solvedBasics","solvedBonus","length","forEach","submission","verdict","hasOwnProperty","contestId","contestNo","solved","includes","problem","push","getExtraScore","undefined","key","id","map","Object","keys","_","pID","pIndex","isBasic","isBonus","score","Math","min","renderInfo","crypto","require","UIContainer","useState","handle","secret","credentials","setCredentials","setSubmissions","setRating","setContests","fetchContests","a","qualifiedContests","ratingUrl","fetch","ratingData","json","ratingChange","cnt","i","contestID","console","log","contestUrl","contestData","parsedContestData","rows","problemResults","find","problemRes","points","handleInputChange","event","preventDefault","prev","target","name","value","onSubmit","randomSixDigit","floor","random","paramList","apiKey","count","time","Date","now","cryptString","join","apiSecret","createHash","update","digest","url","then","response","data","error","fetchSubmissions","fetchProfile","type","placeholder","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b196437.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\r\n\r\nfunction ResultContainer({submissions, rating, contests}) {\r\n    const contestList = {295849: {index: 1, maxProb: \"J\"},\r\n                         296944: {index: 2, maxProb: \"G\"},\r\n                         298568: {index: 3, maxProb: \"H\"},\r\n                         301125: {index: 4, maxProb: \"D\"},\r\n                         304895: {index: 5, maxProb: \"I\"},\r\n                         308133: {index: 6, maxProb: \"K\"}};\r\n    const problemIDs = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"];\r\n    const basicProblems = {\r\n        1: [],\r\n        2: [\"E\"],\r\n        3: [\"C\", \"E\"],\r\n        4: [\"B\", \"C\"],\r\n        5: [\"A\", \"B\", \"C\", \"D\", \"E\", \"H\", \"I\"],\r\n        6: [\"A\", \"B\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"]\r\n    };\r\n    const bonusProblems = {\r\n        1: [],\r\n        2: [\"F\", \"G\"],\r\n        3: [\"G\", \"H\"],\r\n        4: [\"D\"],\r\n        5: [\"F\", \"G\"],\r\n        6: [\"C\", \"D\", \"E\"]\r\n    };\r\n    const ratingScore = {800: 2, 1299: 5, 1599: 10, 1899: 15, 3000: 100}\r\n\r\n    let result = {1: [], 2: [], 3: [], 4: [], 5: [], 6: []};\r\n    let solvedBasics = 0, solvedBonus = 0;\r\n\r\n    if (submissions.length > 0)\r\n    {\r\n        submissions.forEach(submission => {\r\n            if (submission.verdict === \"OK\" && contestList.hasOwnProperty(submission.contestId))\r\n            {\r\n                const contestNo = contestList[submission.contestId].index;\r\n                let solved = result[contestNo];\r\n                if (!solved.includes(submission.problem.index))\r\n                    solved.push(submission.problem.index);\r\n                result[contestNo] = solved;\r\n            }\r\n        });\r\n    }\r\n\r\n    const renderHeader = () => {\r\n        return (\r\n            <Fragment>\r\n                <th>Contest No.</th>\r\n                {problemIDs.map((id, index) => {\r\n                    return <th key={index}>{id}</th>;\r\n                })}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    const renderRow = () => {\r\n        return Object.keys(contestList).map((id, _) => {\r\n            const index = contestList[id].index, maxProb = contestList[id].maxProb, solved = result[index];\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{index}</td>\r\n                    {problemIDs.map((pID, pIndex) => {\r\n                        if (pID > maxProb)\r\n                            return <td key={pIndex}> </td>;\r\n                        const isBasic = basicProblems[index].includes(pID), isBonus = bonusProblems[index].includes(pID), hasSolved = solved.includes(pID);\r\n                        if (hasSolved)\r\n                        {\r\n                            if (isBasic) solvedBasics++;\r\n                            else if (isBonus) solvedBonus++;\r\n                            return <td key={pIndex}>{isBasic || isBonus ? \"✓\" : \"∨\"}</td>;\r\n                        }\r\n                        return <td key={pIndex}>{isBasic || isBonus ? \"✗\" : \"？\"}</td>;\r\n                    })}\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n\r\n    const renderTable = () => {\r\n        return (\r\n            <Fragment>\r\n                <table id='table'>\r\n                    <tbody>\r\n                        <tr>{renderHeader()}</tr>\r\n                        {renderRow()}\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const getExtraScore = (rating) => {\r\n        if (rating === undefined || rating === -1) return 0;\r\n        for (var key in ratingScore)\r\n            if (rating < key)\r\n                return ratingScore[key];\r\n        return 0;\r\n    }\r\n\r\n    const renderInfo = () => {\r\n        const score = 8 * Math.min(solvedBasics, 9) + 5 * Math.min(solvedBonus, 5) + getExtraScore(rating) + Math.min(5*contests, 20);\r\n        return (\r\n            <Fragment>\r\n                <h3>You have solved ({solvedBasics}/9) basic problems. (+{8 * Math.min(solvedBasics, 9)})</h3>\r\n                <h3>You have solved ({solvedBonus}/5) bonus problems. (+{5 * Math.min(solvedBonus, 5)})</h3>\r\n                <h3>{rating === -1 ? \"You are unrated! (+0)\" : `Your rating is ${rating}. (+${getExtraScore(rating)})`}</h3>\r\n                <h3>{contests === 0 ? \"You have not participated any rated contests. (+0)\" :\r\n                    `Woohoo! You have participated (${contests}/4) rated contest(s). (+${Math.min(5*contests, 20)})`}</h3>\r\n                <p></p>\r\n                <h3>Your estimated score is {score} points.</h3>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1 id='title'>Fetch Results: </h1>\r\n            <h4>∨ = not assigned problems, accepted</h4>\r\n            <h4>✓ = assigned problems, accepted</h4>\r\n            <h4>✗ = assigned problems, not finished</h4>\r\n            <h4>？ = no record</h4>\r\n            {renderTable()}\r\n            {renderInfo()}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ResultContainer","import React, {useState} from 'react';\r\nimport ResultContainer from './ResultContainer';\r\nconst crypto = require('crypto'); \r\n\r\nfunction UIContainer()\r\n{\r\n    const CONTESTID_THRESHOLD = 1409;\r\n\r\n    const [credentials, setCredentials] = useState({\r\n        handle: \"\",\r\n        key: \"\",\r\n        secret: \"\"\r\n    });\r\n    const [submissions, setSubmissions] = useState([]);\r\n    const [rating, setRating] = useState(-1);\r\n    const [contests, setContests] = useState(0);\r\n    const {handle, key, secret} = credentials;\r\n\r\n    const fetchSubmissions = () => {\r\n        let randomSixDigit = Math.floor((Math.random() * 900000) + 100000);\r\n        let paramList = {apiKey: key, count: 500, handle: handle, time: Math.floor(Date.now() / 1000)};\r\n        let cryptString = `${randomSixDigit}/user.status?`;\r\n        cryptString += Object.keys(paramList).map((key, _) => {\r\n            return `${key}=${paramList[key]}`\r\n        }).join('&');\r\n        cryptString += `#${secret}`;\r\n\r\n        let apiSecret = crypto.createHash('sha512').update(cryptString).digest('hex');\r\n        \r\n        paramList[\"apiSig\"] = `${randomSixDigit}${apiSecret}`;\r\n        \r\n        let url = 'https://codeforces.com/api/user.status?';\r\n        url += Object.keys(paramList).map((key, _) => {\r\n            return `${key}=${paramList[key]}`\r\n        }).join('&');\r\n        \r\n        console.log(url);\r\n\r\n        fetch(url, {})\r\n            .then((response) => response.json())\r\n            .then(\r\n                (data) => {\r\n                    setSubmissions(data.result);\r\n                },\r\n                (error) => {\r\n                    console.log('Error: ', error);\r\n                }\r\n            );\r\n    }\r\n\r\n    const fetchContests = async () => {\r\n        let qualifiedContests = []\r\n        let ratingUrl = `https://codeforces.com/api/user.rating?handle=${handle}`\r\n\r\n        try {\r\n            const ratingData = await fetch(ratingUrl, {})\r\n            const parsedRatingData = await ratingData.json()\r\n            parsedRatingData.result.forEach(ratingChange => {\r\n                if (ratingChange.contestId >= CONTESTID_THRESHOLD)\r\n                    qualifiedContests.push(ratingChange.contestId)\r\n            })\r\n            let cnt = 0;\r\n            for (let i = 0; i < qualifiedContests.length; i++)\r\n            {\r\n                if (cnt >= 4) break;\r\n                const contestID = qualifiedContests[i];\r\n                console.log(\"Fetching contest: \" + contestID)\r\n                let contestUrl = `https://codeforces.com/api/contest.standings?contestId=${contestID}&handles=${handle}`\r\n                const contestData = await fetch(contestUrl, {})\r\n                const parsedContestData = await contestData.json()\r\n                console.log(parsedContestData)\r\n                if (parsedContestData.result.rows[0].problemResults.find(problemRes => problemRes.points > 0))\r\n                    cnt++;\r\n            }\r\n            setContests(cnt);\r\n        } catch (error) {\r\n            console.log('Error: ', error);\r\n        }\r\n    }\r\n\r\n    const fetchProfile = () => {\r\n        let url = `https://codeforces.com/api/user.info?handles=${handle}`\r\n        fetch(url, {})\r\n            .then((response) => response.json())\r\n            .then(\r\n                (data) => {\r\n                    setRating(data.result[0].rating === undefined ? -1 : data.result[0].rating);\r\n                },\r\n                (error) => {\r\n                    console.log('Error: ', error);\r\n                }\r\n            );\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        event.preventDefault();\r\n        setCredentials(prev => {\r\n            return {\r\n                ...prev,\r\n                [event.target.name]: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetchSubmissions();\r\n        fetchProfile();\r\n        fetchContests();\r\n    }\r\n\r\n    return (\r\n        <div id = \"codeforces_credentials\">\r\n            <form onSubmit={handleSubmit}>\r\n                <p>Handle is: {handle}</p>\r\n                <p><input name=\"handle\" type=\"text\" placeholder=\"Your codeforces handle\" value={handle} onChange={handleInputChange} /></p>\r\n                <p>Key is: {key}</p>\r\n                <p><input name=\"key\" type=\"text\" placeholder=\"Your codeforces API key\" value={key} onChange={handleInputChange}/></p>\r\n                <p>Secret is: {secret}</p>\r\n                <p><input name=\"secret\" type=\"text\" placeholder=\"Your codeforces API secret\" value={secret} onChange={handleInputChange}/></p>\r\n\r\n                <p><button>Fetch results</button></p>\r\n                {submissions.length > 0 && <ResultContainer submissions={submissions} rating={rating} contests={contests}/>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UIContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport UIContainer from './UIContainer'\n\nReactDOM.render(<UIContainer />, document.getElementById('root'));"],"sourceRoot":""}